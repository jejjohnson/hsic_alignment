<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
<script>
(function() {
  function addWidgetsRenderer() {
    var mimeElement = document.querySelector('script[type="application/vnd.jupyter.widget-view+json"]');
    var scriptElement = document.createElement('script');
    var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js';
    var widgetState;

    // Fallback for older version:
    try {
      widgetState = mimeElement && JSON.parse(mimeElement.innerHTML);

      if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) {
        widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js';
      }
    } catch(e) {}

    scriptElement.src = widgetRendererSrc;
    document.body.appendChild(scriptElement);
  }

  document.addEventListener('DOMContentLoaded', addWidgetsRenderer);
}());
</script>

<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
# Rotation Matrices
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
import sys, os
cwd = os.getcwd()
sys.path.insert(0, f'{cwd}/../../src')
sys.path.insert(0, f'{cwd}/../../src/itetoolbox')

import numpy as np
import ite
from sklearn.utils import check_random_state
from data.toy import entropy_marginal
from scipy import stats

%matplotlib inline
%load_ext autoreload
%autoreload 2
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>The autoreload extension is already loaded. To reload it, use:
  %reload_ext autoreload
</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
### Random Rotation
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
d_dimensions = 2
seed = 123

A_rand = stats.special_ortho_group.rvs(dim=d_dimensions, random_state=seed)

print(A_rand.shape)

# Calculate the log determinant
np.linalg.slogdet(A_rand)[1]
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>(2, 2)
</pre>
</div>
</div>

<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>1.6653345369377348e-16</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
### Random Orthogonal Matrix
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
d_dimensions = 2
seed = 123

A_ortho = stats.ortho_group.rvs(dim=d_dimensions, random_state=seed)

A_ortho.shape

# Calculate the log determinant
np.linalg.slogdet(A_ortho)[1]
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>4.996003610813204e-16</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
### Random Unitary Matrix
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
d_dimensions = 2
seed = 123

A_unitary = stats.unitary_group.rvs(dim=d_dimensions, random_state=seed)

A_unitary.shape

# Calculate the log determinant
np.linalg.slogdet(A_unitary)[1]
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>-4.163336342344337e-16</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
### Random Correlation Matrix
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
d_dimensions = 2
seed = 123
eigs = np.array([1.2, 0.8])

A_corr = stats.random_correlation.rvs(eigs=eigs, random_state=seed)

A_corr.shape

# Calculate the log determinant
np.linalg.slogdet(A_corr)[1]
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>-0.04082199452025481</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
### PCA Transformation
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
# generate complete random matrix
n_samples = 100
d_dimensions = 2
X = np.random.rand(n_samples, d_dimensions)
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
from sklearn.decomposition import PCA


pca_model = PCA().fit(X)

# get components, V
V = pca_model.components_

# find log determinant transform of components
np.linalg.slogdet(V)[1]
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>1.1102230246251565e-16</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
### ICA Transformation
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
# generate complete random matrix
n_samples = 100
d_dimensions = 2
X = np.random.rand(n_samples, d_dimensions)
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
from sklearn.decomposition import FastICA

ica_model = FastICA(whiten=True, random_state=seed).fit(X)

# get components, V
V = ica_model.components_

# find log determinant transform of components
np.linalg.slogdet(V)[1]
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>-2.094808661664451</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
#### Orthogonal Constraint

So we need to ensure that the ICA performs under the orthogonal constraint. So for this we can use the [Picard-O]() algorithm. The software can be found [here](https://github.com/pierreablin/picard) ([docs](https://pierreablin.github.io/picard/index.html)).
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
#!pip install picard
```

</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
from picard import picard

ortho = True
seed = 123

K, W, Y = picard(X, ortho=True, random_state=123, whiten=True)

components = W @ K
print(components.shape)
X_trans = X @ components.T
# find log determinant transform of components
# np.linalg.slogdet(W @ K)[1]
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_stream output_stdout output_text">
<pre>(2, 100)
</pre>
</div>
</div>

<div class="output_area" markdown="1">
<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">ValueError</span>                                Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-17-2206cfc7d55f&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span>
<span class="ansi-green-intense-fg ansi-bold">      8</span> components <span class="ansi-blue-fg">=</span> W <span class="ansi-blue-fg">@</span> K
<span class="ansi-green-intense-fg ansi-bold">      9</span> print<span class="ansi-blue-fg">(</span>components<span class="ansi-blue-fg">.</span>shape<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg">---&gt; 10</span><span class="ansi-red-fg"> </span>X_trans <span class="ansi-blue-fg">=</span> X <span class="ansi-blue-fg">@</span> components<span class="ansi-blue-fg">.</span>T
<span class="ansi-green-intense-fg ansi-bold">     11</span> <span class="ansi-red-fg"># find log determinant transform of components</span>
<span class="ansi-green-intense-fg ansi-bold">     12</span> <span class="ansi-red-fg"># np.linalg.slogdet(W @ K)[1]</span>

<span class="ansi-red-fg">ValueError</span>: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)-&gt;(n?,m?) (size 100 is different from 2)</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
X_trans.shape, components.shape, W.shape
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">NameError</span>                                 Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-18-deeb8cb2cac6&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span>
<span class="ansi-green-fg">----&gt; 1</span><span class="ansi-red-fg"> </span>X_trans<span class="ansi-blue-fg">.</span>shape<span class="ansi-blue-fg">,</span> components<span class="ansi-blue-fg">.</span>shape<span class="ansi-blue-fg">,</span> W<span class="ansi-blue-fg">.</span>shape

<span class="ansi-red-fg">NameError</span>: name &#39;X_trans&#39; is not defined</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
np.linalg.slogdet(W)[1]
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">


<div class="output_text output_subarea output_execute_result">
<pre>9.020562075079397e-16</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
Can we go back??
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
# can we go back?
X_ori = (W @ X_trans).T
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">NameError</span>                                 Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-21-9e4215dfa4ae&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span>
<span class="ansi-green-intense-fg ansi-bold">      1</span> <span class="ansi-red-fg"># can we go back?</span>
<span class="ansi-green-fg">----&gt; 2</span><span class="ansi-red-fg"> </span>X_ori <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">(</span>W <span class="ansi-blue-fg">@</span> X_trans<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">.</span>T

<span class="ansi-red-fg">NameError</span>: name &#39;X_trans&#39; is not defined</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
X_ori.shape
```

</div>

<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">


<div class="output_area" markdown="1">
<div class="output_subarea output_text output_error">
<pre>
<span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">NameError</span>                                 Traceback (most recent call last)
<span class="ansi-green-fg">&lt;ipython-input-22-36430365f080&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span>
<span class="ansi-green-fg">----&gt; 1</span><span class="ansi-red-fg"> </span>X_ori<span class="ansi-blue-fg">.</span>shape

<span class="ansi-red-fg">NameError</span>: name &#39;X_ori&#39; is not defined</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python

```

</div>

</div>


